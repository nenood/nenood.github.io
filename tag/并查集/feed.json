{
    "version": "https://jsonfeed.org/version/1",
    "title": "N.E.O.D • All posts by \"并查集\" tag",
    "description": "To chronicle certain moments.",
    "home_page_url": "https://nenood.xyz",
    "items": [
        {
            "id": "https://nenood.xyz/2024/02/11/%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "url": "https://nenood.xyz/2024/02/11/%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "title": "第三周 —— 并查集",
            "date_published": "2024-02-11T13:58:48.000Z",
            "content_html": "<p>这次的主题是并查集</p>\n<p>在一开始的时候我以为只需要简单的默写一遍 <code>find</code> <code>unit</code> 就可以轻松解决的</p>\n<p>但是事实自然并非如此</p>\n<p>并查集的拓展——种类并查集、带权并查集——属实让我有些头晕了</p>\n<p>在此将并查集及其拓展都尽可能的讲清楚</p>\n<span id=\"more\"></span>\n<h2 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h2><p>并查集的根本是有向无环图，可以做到使节点有连通性，还可以通过连通性来检测是否有环</p>\n<p>该数据结构有以下几点基础：</p>\n<ul>\n<li>有若干节点，使用数字表示</li>\n<li>每个节点都带有一条边指向其父节点，父节点使用 <code>fa[]</code> 保存</li>\n<li>初始时所有节点指向自己，即 <code>fa[i] == i</code></li>\n</ul>\n<p>可以实现的功能：</p>\n<ul>\n<li>对于单个节点 <code>x</code> ，可以查找其根节点 <code>find(x)</code></li>\n<li>对于两个节点 <code>a, b</code>，可以将二者合并，<code>unit(a, b)</code></li>\n</ul>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>已有：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> fa[MAXN], rk[MAXN]; <span class=\"comment\">// rk[] 用于后面的按秩合并</span></span><br></pre></td></tr></table></figure>\n<p>并查集使用三个函数实现</p>\n<ul>\n<li><code>init(int n)</code> 初始化节点，使所有节点指向自己，即<code>fa[i] = i</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>find(int x)</code> 以递归的方式查找节点 <code>x</code> 的根节点</p>\n<p>终止条件为自己为根节点，即 <code>fa[x] == x</code></p>\n<p>否则从其父节点继续查找，即 <code>find(fa[x])</code></p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fa[x] == x) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简化的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> fa[x] == x ? x : <span class=\"built_in\">find</span>(fa[x]);&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>unit(int i, int j)</code></p>\n<p>合并两个节点即使<strong>其中一个节点的根节点</strong>（<code>find(i)</code>）以<strong>另一个节点的根节点</strong>（<code>find(j)</code>）为<strong>父节点</strong></p>\n<p>即 <code>fa[find(i)] = find(j)</code></p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"built_in\">find</span>(i), y = <span class=\"built_in\">find</span>(j);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x != y)</span><br><span class=\"line\">\t\tfa[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">find</span>(j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就已经实现了一个最简单的并查集，但是这种简单的并查集在遇到一些情况时性能并不会很好</p>\n<ul>\n<li><p>若有一条长链，5-&gt;4-&gt;3-&gt;2-&gt;1，或者更长</p>\n<p>若从叶节点开始查找递归深度会比较大，因此使用路径压缩</p>\n<p>在查找的时候使每一个节点都指向其根节点，使树的深度始终为 1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fa[x] == x ? x : (fa[x] = <span class=\"built_in\">find</span>(fa[x]));</span><br><span class=\"line\">    <span class=\"comment\">// 改变处为最后，在递归的同时使当前节点指向其根节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上面的长链为例，最后就会形成节点 1 统揽所有节点的局面：<br>5-&gt;1</p>\n<p>4-&gt;1</p>\n<p>3-&gt;1</p>\n<p>2-&gt;1</p>\n<p>1-&gt;1</p>\n<p>由单一的长链变为多分支的短树</p>\n</li>\n<li><p>对于合并操作，若有两个长链 X：5-&gt;4-&gt;3-&gt;2-&gt;1 和 Y：8-&gt;7-&gt;6</p>\n<p>若将 X 接到 Y 上则深度为 6，但若将 Y 接到 X 上，则深度为 5</p>\n<p>显然后者更优，因为<strong>深度更小</strong>，<strong>查询更快</strong></p>\n<p>因此使用按秩合并的方式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\tfa[i] = i;</span><br><span class=\"line\">\t\trk[i] = <span class=\"number\">1</span>; <span class=\"comment\">// 一开始每一个节点的秩为 1（深度为 1）</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"built_in\">find</span>(i), y = <span class=\"built_in\">find</span>(j);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x != y) &#123; <span class=\"comment\">// 若 x == y ，即二者本来就在同一集合内，则无需合并</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rx = rk[x], ry = rk[y];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rx &lt; ry)</span><br><span class=\"line\">\t\t\tfa[x] = y; <span class=\"comment\">// 将秩小的树接到秩大的树上</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfa[y] = x;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rx == ry)</span><br><span class=\"line\">\t\t\t\trk[y]++; <span class=\"comment\">// 若两树的秩相等，则合并后秩会增加 1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>但是，如果使用路径压缩，则会使秩不准确，一般不同时使用二者（个人更倾向于只使用路径压缩）</p>\n<p>最终仅用路径压缩的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;fa[i] = i; rk[i] = <span class=\"number\">1</span>;&#125;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> fa[x] == x ? x : (fa[x] = <span class=\"built_in\">find</span>(fa[x]));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;fa[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">find</span>(j);&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"带权并查集\"><a href=\"#带权并查集\" class=\"headerlink\" title=\"带权并查集\"></a>带权并查集</h2><p>带权并查集即为节点之间的边赋上权值，根据题目可以为权值赋予具体的意义</p>\n<p>带权并查集以普通并查集为基础，关键在于如何在 <code>find</code> 和 <code>unit</code> 中处理好权值，使其正确转移</p>\n<p>以例题引入：</p>\n<blockquote>\n<p>  题述：</p>\n<p>  已知有 <code>n</code> 个盒子，每个盒子内存储一个数<br>  总共有 <code>m</code> 个信息测试，每次测试给出三个数 <code>a, b, s</code> 表示 <code>a</code> 到 <code>b</code> （a &lt; b）之间数的总和（闭区间）<br>  对于每一次测试，给出的三个数可能与前面的测试矛盾，若矛盾则会忽略这次测试给出的信息<br>  需要需要找出错误信息的个数</p>\n<p>  输入：</p>\n<p>  第一行两个数 <code>n, m</code>，意义同题述<br>  接下来 <code>m</code> 行，每行三个整数 <code>a, b, s</code></p>\n<p>  输出：</p>\n<p>  一个整数，表示错误信息的个数</p>\n<p>  原题：<a class=\"link\"   href=\"https://acm.hdu.edu.cn/showproblem.php?pid=3038\" >Problem - 3038 How Many Answers Are Wrong<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>根据题意，每个边的权值即为当前节点到其父节点的总和，使用 <code>sum[]</code> 存储</p>\n<p>例如给出 <code>1 10 100</code> 即 <code>sum[1] = 100, fa[1] = 10</code></p>\n<p>由于是闭区间，为了处理正确，改为左闭右开，即 <code>sum[1] = 100, fa[1] = 11</code></p>\n<p>现在考虑如何在 <code>find</code> <code>unit</code> 中正确转移权值</p>\n<ul>\n<li><p>对于 <code>find</code> </p>\n<p>以 a -&gt; b -&gt; c 为例，其中 sum[a] = x, sum[b] = y</p>\n<p>则在路径压缩后，a -&gt; c , b -&gt; c ，sum[a] = x + y, sum[b] = y</p>\n<p>所以在路径压缩时，每一个节点会顺路加上查找时遍历的每一个节点的 sum</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == fa[x])</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfa[x] = <span class=\"built_in\">find</span>(fa[x]); <span class=\"comment\">// 先递归路径压缩</span></span><br><span class=\"line\">\t\tsum[x] += sum[fa[x]]; <span class=\"comment\">// 再顺路叠加</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fa[x];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 为什么先递归再叠加，可以画图理解</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于 <code>unit</code> ，若输入为 <code>a, b, s</code>，</p>\n<p>以 a -&gt; c, b -&gt; d 为例，其中 sum[a] = x, sum[b] = y</p>\n<p>需要分情况考虑，根据 c 和 d 的位置判断是将 c 接到 d 上还是将 d 接到 c 上</p>\n<ul>\n<li>第一种情况：c &lt; d （已知 a &lt; b），把 c 接到 d 上，即 <code>fa[c] = d</code></li>\n</ul>\n<p><img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/nenood/pic_for_blogs@main/img/qk1.png\"\n                         style=\"zoom: 50%;\" \n                 ></p>\n<p> 易得 <code>sum[c] = sum[b] + s - sum[a]</code></p>\n<ul>\n<li><p>第二种情况：c &gt; d，此时应该把 d 接到 c 上</p>\n<p>同理易得 <code>fa[d] = c, sum[d] = sum[a] - sum[b] - s</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>最终为：\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">        sum[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[x] == x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 换了一种写法，和上面的等效</span></span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">        sum[x] += sum[fa[x]];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (fa[x] = k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a -&gt; x, b -&gt; y</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"built_in\">find</span>(a), y = <span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; y) &#123; <span class=\"comment\">// 第一种情况</span></span><br><span class=\"line\">        fa[x] = y;</span><br><span class=\"line\">        sum[x] = sum[b] + s - sum[a];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; y) &#123; <span class=\"comment\">// 第二种情况</span></span><br><span class=\"line\">        fa[y] = x;</span><br><span class=\"line\">        sum[y] = sum[a] - sum[b] - s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>最后就只剩下如何判断错误信息了</p>\n<p>对于给出的 <code>a, b, s</code>，若 <code>find(a) == find(b)</code> 即存在 a -&gt; b -&gt; n</p>\n<p>只需要判断 a 到 b 的总和是否确实为 s 即可</p>\n<p>因为一开始判断的时候已经用 <code>find</code> 路径压缩过一次了，所以之后必然是 a -&gt; n , b -&gt; n</p>\n<p>则 a 到 b 的总和为 <code>sum[a] - sum[b]</code> （因为 a &lt; b 所以一定有 sum[a] &gt; sum[b]）</p>\n<p>先判断是否在同一个集合，若不在则合并，若在则检查是否正确</p>\n<p>若正确则下一个循环，若不准确则 <code>ans++</code></p>\n<p>结束 .</p>\n<p>最终的代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 并查集部分不重复展示了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF) &#123; <span class=\"comment\">// 这题比较莫名其妙，实际上不止一个测试样例...</span></span><br><span class=\"line\">        <span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>, a, b, s;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;s);</span><br><span class=\"line\">            b++; <span class=\"comment\">// 改为左闭右开，也可以 a-- 改为左开右闭，其他不用变</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(a) == <span class=\"built_in\">find</span>(b) &amp;&amp; s != (sum[a] - sum[b]))</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">unit</span>(a, b, s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">开头的 while(scanf(&quot;%d%d&quot;, &amp;n, &amp;m) != EOF)</span></span><br><span class=\"line\"><span class=\"comment\">也可以写成 while(~scanf(&quot;%d%d&quot;, &amp;n, &amp;m)) 但是目前还没弄清楚为什么可以</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"种类并查集\"><a href=\"#种类并查集\" class=\"headerlink\" title=\"种类并查集\"></a>种类并查集</h2><p>以例题引入：</p>\n<blockquote>\n<p>  题述：</p>\n<p>  存在三种动物 A B C，这三种动物的食物链为 A 吃 B，B 吃 C，C 吃 A</p>\n<p>  有 n 个动物，每个动物为 A B C 中的其中一种</p>\n<p>  给出 m 条信息，每条信息 <code>a x y</code> </p>\n<p>  若 a 为 1 则表示动物 x 和动物 y 为同类</p>\n<p>  若 a 为 2 则表示动物 x  吃动物 y</p>\n<p>  有三种错误的信息：</p>\n<ol>\n<li>与前述信息矛盾的</li>\n<li>2 x x 的（表示自己吃自己是不允许的）</li>\n<li><p>x 或 y 大于 n 的</p>\n<p>需要求出错误信息的个数</p>\n<p>输入：</p>\n<p>第一行两个整数 n m</p>\n<p>接下来 m 行每行三个整数 a x y</p>\n<p>输出：</p>\n<p>错误信息的数量</p>\n<p>原题：<a class=\"link\"   href=\"https://www.luogu.com.cn/problem/P2024\" >P2024 [NOI2001] 食物链<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n</ol>\n</blockquote>\n<p>普通的并查集中，两个元素在同一个集合则表示这两个元素具有同样的性质，为同类</p>\n<p>然而种类并查集可以用来表示两个元素之间的多种关系，例如“敌人”、“朋友”等</p>\n<p>根据题意应该表达“吃”与“被吃”的关系</p>\n<p>种类并查集的核心思想就是对于每一个元素给出额外的标识</p>\n<p>例如 a 和 b</p>\n<p>若 a 和 b 在同一个集合，则表示 a 和 b 为“朋友”</p>\n<p>若 a 和 b + n 在同一个集合，则表示 a 和 b 为“敌人”</p>\n<p>因此要实现种类并查集，保存节点的数组大小需要扩增，本题需要扩增为三倍</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> fa[MAXN * <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">3</span> * n; i++) fa[i] = i;&#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用 a, a+n, a+2 * n 分别表示三种动物</p>\n<p>若输入为 <code>1, a, b</code></p>\n<p>合并：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unit</span>(a, b);</span><br><span class=\"line\"><span class=\"built_in\">unit</span>(a + n, b + n);</span><br><span class=\"line\"><span class=\"built_in\">unit</span>(a + <span class=\"number\">2</span> * n, b + <span class=\"number\">2</span> * n);</span><br><span class=\"line\"><span class=\"comment\">// 三行都表明 a 和 b 是同一种族</span></span><br><span class=\"line\"><span class=\"comment\">// 之所以要 unit 三次是因为并没有确切指定 A B C ，因此每一个种群相应的动物都要相连</span></span><br></pre></td></tr></table></figure>\n<p>判断正误：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(a) == <span class=\"built_in\">find</span>(b + <span class=\"number\">2</span> * n) || <span class=\"built_in\">find</span>(a) == <span class=\"built_in\">find</span>(b + n)) ans++;</span><br><span class=\"line\"><span class=\"comment\">// a b 不是同类的情况：a 被 b 吃 或者 a 吃 b</span></span><br></pre></td></tr></table></figure>\n<p>若输入为 <code>2, a, b</code></p>\n<p>合并</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unit</span>(a, b + n);</span><br><span class=\"line\"><span class=\"built_in\">unit</span>(a + n, b + <span class=\"number\">2</span> * n);</span><br><span class=\"line\"><span class=\"built_in\">unit</span>(a + <span class=\"number\">2</span> * n, b);</span><br><span class=\"line\"><span class=\"comment\">// 三行都表明 a 吃 b</span></span><br></pre></td></tr></table></figure>\n<p>判断正误：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(a) == <span class=\"built_in\">find</span>(b) || <span class=\"built_in\">find</span>(a) == <span class=\"built_in\">find</span>(b + <span class=\"number\">2</span> * n)) ans++;</span><br><span class=\"line\"><span class=\"comment\">// a 不吃 b 的情况：a 和 b 是同类 或者 a 被 b 吃</span></span><br></pre></td></tr></table></figure>\n<p>最终代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXN 51091*3</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fa[MAXN], n, m, ans = <span class=\"number\">0</span>, a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">3</span> * n; i++) &#123;fa[i] = i;&#125;&#125; <span class=\"comment\">// ! 这里要对三倍的范围进行初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> x == fa[x] ? x : (fa[x] = <span class=\"built_in\">find</span>(fa[x]));&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;<span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != <span class=\"built_in\">find</span>(j)) fa[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">find</span>(j);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将二者判为同类（此处使用 for 循环简化上述的三行 unit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">equal</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= <span class=\"number\">2</span>; k++) <span class=\"built_in\">unit</span>(i + k * n, j + k * n);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将二者判为吃与被吃的关系</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">eat</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= <span class=\"number\">2</span>; k++) <span class=\"built_in\">unit</span>(i + k * n, j + ((k + <span class=\"number\">1</span>) % <span class=\"number\">3</span>) * n);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回是否矛盾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">notequal</span><span class=\"params\">(<span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(b) == <span class=\"built_in\">find</span>(c + <span class=\"number\">2</span> * n) || <span class=\"built_in\">find</span>(b) == <span class=\"built_in\">find</span>(c + n);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">noteat</span><span class=\"params\">(<span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(b) == <span class=\"built_in\">find</span>(c) || <span class=\"built_in\">find</span>(b) == <span class=\"built_in\">find</span>(c + <span class=\"number\">2</span> * n);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &gt; n || c &gt; n) &#123;ans++; <span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">if</span> (<span class=\"built_in\">notequal</span>(b, c)) ans++; <span class=\"keyword\">else</span> <span class=\"built_in\">equal</span>(b, c);&#125; <span class=\"comment\">// 若矛盾则 ans++，反之判为同类</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">if</span> (<span class=\"built_in\">noteat</span>(b, c)) ans++; <span class=\"keyword\">else</span> <span class=\"built_in\">eat</span>(b, c);&#125; <span class=\"comment\">// 若矛盾则 ans++，反之判为 b 吃 c</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>此题的另一种做法：带权并查集</p>\n<p>使用权值代表关系，用 <code>re[]</code> 保存（relationship），0 代表同类，1 代表吃，2代表被吃</p>\n<p>关键同样在于解决如何在 <code>find</code> <code>unit</code> 中正确转移权值</p>\n<ul>\n<li><p>对于 <code>find</code></p>\n<p>若有 a -&gt; b -&gt; c，re[a] = 1, re[b] = 1, re[c] = 0</p>\n<p>则路径压缩后的 a -&gt; c, b -&gt; c 应该有 re[a] = re[a] + re[b] = 2, re[b] = 1, re[c] = 0</p>\n<p>但是若压缩前 re[a] = 2, re[b] = 2, re[c] = 0</p>\n<p>则应该为 re[a] = (re[a] + re[b]) % 3 = 1, re[b] = 2, re[c] = 0;</p>\n<p>所以不同于上面的带权并查集，此处应该在叠加后 mod 3</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f = fa[x];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[x] == x) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fa[x] = <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">        re[x] = (re[x] + re[f]) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* （自己犯的一个错误 T_T ）</span></span><br><span class=\"line\"><span class=\"comment\">    ! 这是错误的递归，仅在子节点至根节点的节点数不多于3的时候正确（可画图验证）</span></span><br><span class=\"line\"><span class=\"comment\">    else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        re[x] = (re[x] + re[fa[x]]) % 3;</span></span><br><span class=\"line\"><span class=\"comment\">        return fa[x] = find(fa[x]);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于 <code>unit</code> 若输入为 <code>i j r</code></p>\n<p>  <img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/nenood/pic_for_blogs@main/img/v.png\"\n                         style=\"zoom: 50%;\" \n                 ></p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"built_in\">find</span>(i), y = <span class=\"built_in\">find</span>(j), k = re[i]; <span class=\"comment\">// 提前存上未改变的re[i]，下面会用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    fa[i] = y; re[i] = (r + re[j]) % <span class=\"number\">3</span>; <span class=\"comment\">// 将 i 接到 y 上</span></span><br><span class=\"line\">    fa[x] = y; re[x] = (re[i] - k + <span class=\"number\">3</span>) % <span class=\"number\">3</span>; <span class=\"comment\">// 将 x 接到 y 上 由于 re[i] - k 有可能为负值因此加上 3 后再取模</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最后是判断是否矛盾</p>\n<p>对于两个节点 <code>a b</code> </p>\n<p>若 <code>find(a) == find(b)</code> 则意味着二者之间已经存在关系，需要判断给出的关系和已存在的关系是否一致</p>\n<p>若输入为 <code>1 a b</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(a) == <span class=\"built_in\">find</span>(b) &amp;&amp; re[a] != re[b]) ans++;</span><br><span class=\"line\"><span class=\"comment\">// 前面的 find 已经进行了路径压缩，所以此时一定有 a -&gt; n, b -&gt; n</span></span><br></pre></td></tr></table></figure>\n<p>若输入为 <code>2 a b</code> 且 re[a] = x, re[b] = y ，使用一个 <code>bool jdg()</code> 来返回是否矛盾</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">jdg</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y != <span class=\"number\">1.5</span> * x * x - <span class=\"number\">3.5</span> * x + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    ? 正常应该是下面这样, 即根据二者与父节点的关系判断二者之间的关系</span></span><br><span class=\"line\"><span class=\"comment\">    return (y - x + 3) % 3 != 1;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">说明一下上面那个奇怪等式的来由</span></span><br><span class=\"line\"><span class=\"comment\">对于 a b 两个节点，a -&gt; n, b -&gt; n</span></span><br><span class=\"line\"><span class=\"comment\">要判断二者是否是 a 吃 b 的关系</span></span><br><span class=\"line\"><span class=\"comment\">必满足：</span></span><br><span class=\"line\"><span class=\"comment\">若 re[a] = 0 时 re[b] = 2</span></span><br><span class=\"line\"><span class=\"comment\">若 re[a] = 1 时 re[b] = 0</span></span><br><span class=\"line\"><span class=\"comment\">若 re[a] = 2 时 re[b] = 1</span></span><br><span class=\"line\"><span class=\"comment\">于是必有一个抛物线 y = a * x^2 + b * x + c 经过 (0, 2), (1, 0), (2, 1) 三点</span></span><br><span class=\"line\"><span class=\"comment\">列出方程组解出 a, b, c 就得到了 y = 1.5 * x * x - 3.5 * x + 2;</span></span><br><span class=\"line\"><span class=\"comment\">奇怪的思路罢了（</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>最终代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXN 51091</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[MAXN], re[MAXN], n, m, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i ++) &#123;fa[i] = i; re[i] = <span class=\"number\">0</span>;&#125;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f = fa[x];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[x] == x) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fa[x] = <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">        re[x] = (re[x] + re[f]) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"built_in\">find</span>(i), y = <span class=\"built_in\">find</span>(j), k = re[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    re[i] = (r + re[j]) % <span class=\"number\">3</span>;</span><br><span class=\"line\">    re[x] = (re[i] - k + <span class=\"number\">3</span>) % <span class=\"number\">3</span>;</span><br><span class=\"line\">    fa[x] = y;</span><br><span class=\"line\">    fa[i] = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">jdg</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y != <span class=\"number\">1.5</span>*x*x - <span class=\"number\">3.5</span>*x + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &gt; n || c &gt; n) &#123;</span><br><span class=\"line\">            ans ++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(b) == <span class=\"built_in\">find</span>(c) &amp;&amp; re[b] != re[c]) &#123;</span><br><span class=\"line\">                ans ++;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">unit</span>(b, c, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b == c || (<span class=\"built_in\">find</span>(b) == <span class=\"built_in\">find</span>(c) &amp;&amp; <span class=\"built_in\">jdg</span>(re[b], re[c]))) &#123;</span><br><span class=\"line\">                ans ++;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">unit</span>(b, c, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"检测是否存在环\"><a href=\"#检测是否存在环\" class=\"headerlink\" title=\"检测是否存在环\"></a>检测是否存在环</h2><p>例题：<a class=\"link\"   href=\"https://acm.hdu.edu.cn/showproblem.php?pid=1272\" >Problem - 1272 小希的迷宫<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>  若干房间，要求<strong>任意两个</strong>房间之间<strong>有且仅有一条</strong>路可以互通</p>\n<p>  给出房间的通道信息，求其是否满足条件</p>\n<p>  （即给出一个图，求该图是否有环 以及 是否仅有一个集合）</p>\n<p>  输入：</p>\n<p>  包含多组数据，每组数据是一个以0 0结尾的整数对列表，表示了一条通道连接的两个房间的编号。</p>\n<p>  房间的编号至少为1，且不超过100000。</p>\n<p>  每两组数据之间有一个空行。</p>\n<p>  整个文件以两个-1结尾。</p>\n<p>  输出</p>\n<p>  对于每组数据，若房间满足条件则输出 Yes 反之输出 No</p>\n</blockquote>\n<p>对于图而言，有三个元素，节点数（node）、边数（edge）和集合数（n）</p>\n<div class=\"keep-note info\"><p>性质：n = node - edge</p>\n</div>\n<p>因此两个条件对于并查集而言，即：</p>\n<ol>\n<li>是否有环 &lt;=&gt; 每次读入 <code>a b</code> 是否有 <code>find(a) == find(b)</code></li>\n<li>是否仅有一个集合 &lt;=&gt; node - edge 是否等于 1</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXN 100005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分别为：父节点、节点是否存在、读入的节点 a b、节点数、边数、是否符合条件</span></span><br><span class=\"line\"><span class=\"type\">int</span> fa[MAXN], rec[MAXN], a, b, node, edge, f;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每一次开始都要初始化所有数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;f = <span class=\"number\">1</span>; node = edge = <span class=\"number\">0</span>; <span class=\"built_in\">memset</span>(rec, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(rec)); <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= MAXN; i++) fa[i] = i;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> fa[x] == x ? x : (fa[x] = <span class=\"built_in\">find</span>(fa[x]));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">unit</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;fa[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">find</span>(j);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 记录节点数，若当前节点未出现过则标记该节点，并 node++</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">getnode</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123;<span class=\"keyword\">if</span> (rec[a] == <span class=\"number\">0</span>) &#123;rec[a] = <span class=\"number\">1</span>; node++;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b), (a != <span class=\"number\">-1</span> &amp;&amp; b != <span class=\"number\">-1</span>)) &#123; <span class=\"comment\">// 当未读取到 -1 -1 时一直循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"number\">0</span> &amp;&amp; b == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 若读到 0 0 则输出是否满足并初始化</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(edge+<span class=\"number\">1</span> == node || (edge == <span class=\"number\">0</span> &amp;&amp; node == <span class=\"number\">0</span>))) f = <span class=\"number\">0</span>;<span class=\"comment\">// 仅当只有一个集合或者没有房间的时候，满足条件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(a) == <span class=\"built_in\">find</span>(b)) &#123;</span><br><span class=\"line\">                f = <span class=\"number\">0</span>; <span class=\"comment\">// 若成环，则不满足条件</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">unit</span>(a, b);</span><br><span class=\"line\">                <span class=\"built_in\">getnode</span>(a), <span class=\"built_in\">getnode</span>(b); <span class=\"comment\">// 记录节点数</span></span><br><span class=\"line\">                edge++; <span class=\"comment\">// 记录边数</span></span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串的并查集\"><a href=\"#字符串的并查集\" class=\"headerlink\" title=\"字符串的并查集\"></a>字符串的并查集</h2><p>例题：<a class=\"link\"   href=\"https://www.luogu.com.cn/problem/P2814\" >P2814 家谱<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>  输入：</p>\n<p>  输入由多行组成，</p>\n<p>  首先是一系列有关父子关系的描述，</p>\n<p>  其中每一组父子关系中父亲只有一行，儿子可能有若干行，</p>\n<p>  用 <code>#name</code> 的形式描写一组父子关系中的父亲的名字，</p>\n<p>  用 <code>+name</code> 的形式描写一组父子关系中的儿子的名字；</p>\n<p>  接下来用 <code>?name</code> 的形式表示要求该人的最早的祖先；</p>\n<p>  最后用单独的一个 <code>$</code> 表示文件结束。</p>\n<p>  输出：</p>\n<p>  按照输入文件的要求顺序，求出每一个要找祖先的人的祖先</p>\n<p>  格式为：本人的名字 ++ 一个空格 ++ 祖先的名字 ++ 回车。</p>\n</blockquote>\n<p>若使用数组编码后再用并查集，十分麻烦</p>\n<p>于是可以使用 <code>map</code> 来存入字符串</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map &lt;string, string&gt; fa;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">find</span><span class=\"params\">(string str)</span> </span>&#123;<span class=\"keyword\">return</span> fa[str] == str ? str : <span class=\"built_in\">find</span>(fa[str]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> viod <span class=\"title\">unit</span><span class=\"params\">(string i, string j)</span> </span>&#123;fa[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">find</span>(j);&#125;</span><br></pre></td></tr></table></figure>\n<p>最终代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&quot;\\n&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">map &lt;string, string&gt; fa;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">find</span><span class=\"params\">(string name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[name] == name ? name : <span class=\"built_in\">find</span>(fa[name]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    cin &gt;&gt; c;</span><br><span class=\"line\">    string name, fname;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c != <span class=\"string\">&#x27;$&#x27;</span>) &#123;</span><br><span class=\"line\">        cin &gt;&gt; name;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;#&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fa[name] == <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                fa[name] = name;</span><br><span class=\"line\">            fname = name;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;+&#x27;</span>) &#123;</span><br><span class=\"line\">            fa[name] = fname;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;?&#x27;</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">find</span>(name) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cin &gt;&gt; c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "并查集"
            ]
        }
    ]
}