{
    "version": "https://jsonfeed.org/version/1",
    "title": "N.E.O.D • All posts by \"前缀和与差分\" tag",
    "description": "To chronicle certain moments.",
    "home_page_url": "https://nenood.xyz",
    "items": [
        {
            "id": "https://nenood.xyz/2024/01/31/2024-01-%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C%E5%91%A8/",
            "url": "https://nenood.xyz/2024/01/31/2024-01-%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C%E5%91%A8/",
            "title": "2024-01-寒假第二周",
            "date_published": "2024-01-31T10:08:01.000Z",
            "content_html": "<p>意识到似乎部分简单题目写题解并没有多少实质性的作用</p>\n<p>于是只挑出自己在做的时候遇到一些问题的题目</p>\n<p>本周题目主要是前缀和与差分</p>\n<span id=\"more\"></span>\n<h2 id=\"Q-01-Also-Try-Minecraft\"><a href=\"#Q-01-Also-Try-Minecraft\" class=\"headerlink\" title=\"Q_01-Also Try Minecraft\"></a>Q_01-Also Try Minecraft</h2><ul>\n<li><a class=\"link\"   href=\"https://www.luogu.com.cn/problem/CF1709B\" >Also Try Minecraft<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>可以使用<code>num[]</code> <code>asc[]</code> <code>dis[]</code> <code>ascsum[]</code> <code>dissum[]</code>分别记录</p>\n<ol>\n<li>输入的每一个高度</li>\n<li>从左往右移动会受到的伤害</li>\n<li>从右往左移动会受到的伤害</li>\n<li>从左往右受到伤害的前缀和</li>\n<li>从右往左受到伤害的前缀和</li>\n</ol>\n<p>但是实际上最终答案只需要两个前缀和来计算伤害总和，于是前面三个变量均可不使用数组全部保存</p>\n<p>要计算移动一格受到的伤害只需要本次读入的高度和上一次读入的高度，<code>num[]</code>可只用两个变量代替</p>\n<p>对于前缀和只需要用前缀和数组代替记录移动一格的伤害即可，最终代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">ll n, m, asc[<span class=\"number\">200005</span>], dis[<span class=\"number\">200005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    ll a = <span class=\"number\">0</span>, b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">2</span>) &#123; <span class=\"comment\">// 读入的同时计算前缀和</span></span><br><span class=\"line\">            asc[i<span class=\"number\">-1</span>] = b &lt; a ? a - b : <span class=\"number\">0</span>; </span><br><span class=\"line\">            dis[i<span class=\"number\">-1</span>] = b &gt; a ? b - a : <span class=\"number\">0</span>;</span><br><span class=\"line\">            asc[i<span class=\"number\">-1</span>] += asc[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">            dis[i<span class=\"number\">-1</span>] += dis[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">            <span class=\"comment\">// 因为i&gt;=2时才记录第一次伤害以及前缀和，所以要i-1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        ll a, b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"comment\">// a和b各-1后恰好符合前缀和相减</span></span><br><span class=\"line\">        ll ans = a &lt; b ? asc[b<span class=\"number\">-1</span>] - asc[a<span class=\"number\">-1</span>] : dis[a<span class=\"number\">-1</span>] - dis[b<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Q-02-Fedya-and-Array\"><a href=\"#Q-02-Fedya-and-Array\" class=\"headerlink\" title=\"Q_02-Fedya and Array\"></a>Q_02-Fedya and Array</h2><ul>\n<li><a class=\"link\"   href=\"https://www.luogu.com.cn/problem/CF1793B\" >Fedya and Array<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>感觉和前缀和与差分没什么关系，就是构造数列</p>\n<p>可以假设局部最大值与局部最小值仅有一个，则可以设置数列为</p>\n<p>X → Y → X-1 数列长度则为 2*(X-Y)</p>\n<p>问题解决</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long</span></span><br><span class=\"line\">ll n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        ll max, min;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>, &amp;max, &amp;min);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, (max - min)*<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll j = max; j &gt;= min; j--)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, j);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll j = min+<span class=\"number\">1</span>; j &lt;= max<span class=\"number\">-1</span>; j++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, j);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Q-03-海底高铁\"><a href=\"#Q-03-海底高铁\" class=\"headerlink\" title=\"Q_03-海底高铁\"></a>Q_03-海底高铁</h2><ul>\n<li><a class=\"link\"   href=\"https://www.luogu.com.cn/problem/P3406\" >P3406 海底高铁<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>要想花的钱最少，就要比较买卡和不买卡的总花费</p>\n<p>总花费 = 次数 × 单次花费 ( + 工本费 )</p>\n<p>因此关键在于统计结果某条道路的次数</p>\n<p>若前一次输入和本次输入分别为<code>a</code> <code>b</code>，则对于<code>a → b</code>内的所有路的次数均要+1</p>\n<p>此处就要使用差分来做到区间修改</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">ll n, m, ans;</span><br><span class=\"line\">ll a, b, cnt[<span class=\"number\">100005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios_base::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a); <span class=\"comment\">// 先读取一次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">2</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;b);</span><br><span class=\"line\">        <span class=\"comment\">// 一开始cnt作为差分数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &gt; a) &#123;</span><br><span class=\"line\">            cnt[a]++;</span><br><span class=\"line\">            cnt[b]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cnt[b]++;</span><br><span class=\"line\">            cnt[a]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a = b; <span class=\"comment\">// 将本次读取的数作为上一次的数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= n<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 整合cnt，统计出经过每条路的次数</span></span><br><span class=\"line\">        cnt[i] += cnt[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        ll x, y, z;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class=\"line\">        ans += <span class=\"built_in\">min</span>(cnt[i]*x, cnt[i]*y+z); <span class=\"comment\">// 选择最优解</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Q-04-Balanced-Substring\"><a href=\"#Q-04-Balanced-Substring\" class=\"headerlink\" title=\"Q_04-Balanced Substring\"></a>Q_04-Balanced Substring</h2><ul>\n<li><a class=\"link\"   href=\"https://codeforces.com/problemset/problem/873/B\" >Balanced Substring (codeforces)<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>遍历字符串<code>str</code>，若为<code>0</code>则<code>sum--</code>，反之<code>sum++</code></p>\n<p>每一次遍历都以<code>sum</code>为键，遍历次数为值，存入<code>map</code>，则有两种情况说明已经有平衡子字符串：</p>\n<ol>\n<li>sum == 0</li>\n<li>map[sum] != 0</li>\n</ol>\n<p>第一种情况说明加的次数与减的次数相等</p>\n<p>第二种情况说明在前面某一次到现在这一次，加的次数与减的次数相等</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    cin &gt;&gt; str;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; book;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str[i<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            sum--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum == <span class=\"number\">0</span>) <span class=\"comment\">// 第一种情况，i就是字符串长度</span></span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (book[sum] == <span class=\"number\">0</span>) <span class=\"comment\">// 若没存过，则存入</span></span><br><span class=\"line\">            book[sum] = i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">// 第二种情况，字符串长度为 i - book[sum]</span></span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, i - book[sum]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前缀和与差分"
            ]
        }
    ]
}